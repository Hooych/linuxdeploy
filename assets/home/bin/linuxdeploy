#!./bin/sh
#
# Linux Deploy for Android
# (C) 2012 Anton Skshidlevsky <meefik@gmail.com>
#

[ -z "$HOME_DIR" ] && HOME_DIR="."

if [ -r "$HOME_DIR/etc/deploy.conf" ]; then
	. $HOME_DIR/etc/deploy.conf
else
	echo "Configuration file not found!"
	exit 1
fi

PATH=$PATH:/usr/bin:/bin:/usr/sbin:/sbin
TERM=vt100
export PATH TERM

[ -n "`echo $TRACE_MODE | grep -i "^y"`" ] && set -x

#################################################

prepare_system()
{
	echo "[PRINT] Checking mount points ... "
	is_mnt=`cat /proc/mounts | grep " $MNT_TARGET "`
	if [ -n "$is_mnt" ]; then
		echo "[RESULT_LN] fail"; return 1
	else
		echo "[RESULT_LN] done"
	fi

	echo "[PRINT] Checking destination path ... "
	if [ "$DEPLOY_TYPE" == "image" ]; then
		if [ -e "$IMG_TARGET" -a ! -f "$IMG_TARGET" ]; then
			echo "[RESULT_LN] fail"; return 1
		fi
	fi
	if [ "$DEPLOY_TYPE" == "partition" ]; then
		if [ ! -b "$IMG_TARGET" ]; then
			echo "[RESULT_LN] fail"; return 1
		fi
	fi
	if [ "$DEPLOY_TYPE" == "directory" ]; then
		if [ ! -d "$IMG_TARGET" ]; then
			echo "[RESULT_LN] fail"; return 1
		fi
	fi
	echo "[RESULT_LN] done"
	
	if [ "$DEPLOY_TYPE" == "image" ]; then
		echo "[PRINT] Making new disk image ($IMG_SIZE MB) ... "
		(set -e
		    if [ "$IMG_SIZE" -eq 0 ]; then
		    	[ -f "$IMG_TARGET" ] && FILE_SIZE=`stat -c %s $IMG_TARGET` || FILE_SIZE=0
		    	DIR_NAME=`dirname $IMG_TARGET`
		    	BLOCK_SIZE=`stat -c %s -f $DIR_NAME`
				AVAILABLE_SIZE=`stat -c %a -f $DIR_NAME`
				let AVAILABLE_SIZE="($BLOCK_SIZE*$AVAILABLE_SIZE)+$FILE_SIZE"
				let IMG_SIZE="($AVAILABLE_SIZE-$AVAILABLE_SIZE/10)/1048576"
				[ "$IMG_SIZE" -gt 4095 ] && IMG_SIZE=4095
			fi
			if [ "$IMG_SIZE" -ge 2048 ]; then
				DD_SEEK=2047
				let DD_COUNT=$IMG_SIZE-2047
			else
				DD_SEEK=$IMG_SIZE
				DD_COUNT=0
			fi
			dd if=/dev/zero of=$IMG_TARGET bs=1048576 seek=$DD_SEEK count=$DD_COUNT
		exit 0)
		if [ $? -eq 0 ]; then
			echo "[RESULT_LN] done"
		else
			echo "[RESULT_LN] fail"; return 1
		fi
	fi

	if [ "$DEPLOY_TYPE" == "image" -o "$DEPLOY_TYPE" == "partition" ]; then
		if [ "$FS_TYPE" == "auto" ]; then
			FS_TYPE="none"
			echo "[PRINT] Detecting file system ... "
			for fs in ext4 ext3 ext2
			do
				fs_support=`cat /proc/filesystems | grep $fs`
				if [ -n "$fs_support" ]; then
					FS_TYPE=$fs
					break
				fi
			done
			echo "[RESULT_LN] $FS_TYPE"
			[ "$FS_TYPE" == "none" ] && return 1
		fi
		echo "[PRINT] Making $FS_TYPE file system ... "
		(set -e
			is_loop=`losetup | grep $IMG_TARGET || true`
			is_raw=`cat /proc/mounts | grep $IMG_TARGET || true`
			[ -z "$is_loop" -a -z "$is_raw" ] && mke2fs -qF -t $FS_TYPE -O ^has_journal $IMG_TARGET
		exit 0)
		if [ $? -eq 0 ]; then
			echo "[RESULT_LN] done"
		else
			echo "[RESULT_LN] fail"; return 1
		fi
	fi
	
	return 0
}

configure_system()
{
	if [ "$#" -eq 0 ]; then
		echo "[PRINT_LN] Configuring GNU/Linux system: "
		case "$DISTRIB" in
		debian)
			configure_system dns mtab motd hosts hostname timezone sudo locales repository users profile sftp-server gui
		;;
		ubuntu)
			configure_system dns mtab motd hosts hostname timezone sudo locales repository users profile upstart gui
		;;
		archlinux)
			configure_system dns mtab motd hosts hostname timezone sudo locales repository users profile gui
		;;
		esac
		return 0
	fi
	if [ "$#" -gt 1 ]; then
		for i in $*
		do
			configure_system $i
		done
		return 0
	fi

	echo "[PRINT] $1 ... "
	(set -e	
		case "$1" in
		dns)
			echo -n > $MNT_TARGET/etc/resolv.conf
			if [ -z "$SERVER_DNS" ]; then
				dns1=`getprop net.dns1`
				dns2=`getprop net.dns2`
				DNS_LIST="$dns1 $dns2"
				[ -z "$dns1" -a -z "$dns2" ] && DNS_LIST="8.8.8.8"
			else
				DNS_LIST=`echo $SERVER_DNS | tr ',;' ' '`
			fi
			for dns in $DNS_LIST
			do
				echo "nameserver $dns" >> $MNT_TARGET/etc/resolv.conf
			done
			chmod 644 $MNT_TARGET/etc/resolv.conf
		;;
		mtab)
			#chroot $MNT_TARGET ln -sf /proc/mounts /etc/mtab
			rm -f $MNT_TARGET/etc/mtab || true
			cat /proc/mounts | grep $MNT_TARGET | sed "s|$MNT_TARGET/*|/|g" > $MNT_TARGET/etc/mtab
			chmod 644 $MNT_TARGET/etc/mtab
		;;
		motd)
			LINUX_VERSION=`chroot $MNT_TARGET lsb_release -d | sed 's|Description:[[:space:]]*||' || true`
			[ -z "$LINUX_VERSION" ] && LINUX_VERSION="GNU/Linux"
			MOTD="$LINUX_VERSION [running on Android via Linux Deploy]"
			rm -f $MNT_TARGET/etc/motd || true
			echo $MOTD > $MNT_TARGET/etc/motd
			chmod 644 $MNT_TARGET/etc/motd		
		;;
		hosts)
			is_localhost=`cat $MNT_TARGET/etc/hosts | grep "^127.0.0.1" || true`
			[ -z "$is_localhost" ] && echo '127.0.0.1 localhost' >> $MNT_TARGET/etc/hosts
			chmod 644 $MNT_TARGET/etc/hosts
		;;
		hostname)
			echo 'localhost' > $MNT_TARGET/etc/hostname
			chmod 644 $MNT_TARGET/etc/hostname
		;;
		timezone)
			TZ=`getprop persist.sys.timezone`
			rm -f $MNT_TARGET/etc/localtime || true
			cp $MNT_TARGET/usr/share/zoneinfo/$TZ $MNT_TARGET/etc/localtime
			case "$DISTRIB" in
			debian|ubuntu)
				echo $TZ > $MNT_TARGET/etc/timezone
				chmod 644 $MNT_TARGET/etc/timezone		
			;;
			esac
		;;
		sudo)
			SUDO_STR="$USER_NAME ALL=(ALL:ALL) NOPASSWD:ALL"
			is_str=`cat $MNT_TARGET/etc/sudoers | grep "$SUDO_STR" || true`
			[ -z "$is_str" ] && echo $SUDO_STR >> $MNT_TARGET/etc/sudoers
			chmod 440 $MNT_TARGET/etc/sudoers		
		;;
		locales)
			echo "$LOCALE UTF-8" > $MNT_TARGET/etc/locale.gen
			chmod 644 $MNT_TARGET/etc/locale.gen
			chroot $MNT_TARGET locale-gen $LOCALE
			case "$DISTRIB" in
			debian|ubuntu)
				echo "LANG=$LOCALE" > $MNT_TARGET/etc/default/locale
				chmod 644 $MNT_TARGET/etc/default/locale
			;;
			archlinux)
				echo "LANG=$LOCALE" > $MNT_TARGET/etc/locale.conf
				chmod 644 $MNT_TARGET/etc/locale.conf
			;;
			esac		
		;;
		repository)
			case "$DISTRIB" in
			debian|ubuntu)
				if [ -e "$MNT_TARGET/etc/apt/sources.list" ]; then
					cp $MNT_TARGET/etc/apt/sources.list $MNT_TARGET/etc/apt/sources.list.bak
				else
					echo "# Generated by Linux Deploy" > $MNT_TARGET/etc/apt/sources.list
				fi
				if [ -z "`grep "$MIRROR.*$SUITE" $MNT_TARGET/etc/apt/sources.list`" ]; then
					case "$DISTRIB" in
					debian)
						echo "deb $MIRROR $SUITE main contrib non-free" >> $MNT_TARGET/etc/apt/sources.list
						echo "deb-src $MIRROR $SUITE main contrib non-free" >> $MNT_TARGET/etc/apt/sources.list
					;;
					ubuntu)
						echo "deb $MIRROR $SUITE main universe multiverse" >> $MNT_TARGET/etc/apt/sources.list
						echo "deb-src $MIRROR $SUITE main universe multiverse" >> $MNT_TARGET/etc/apt/sources.list
					;;
					esac
				fi
				chmod 644 $MNT_TARGET/etc/apt/sources.list
			;;
			archlinux)
				sed -i "s|^[[:space:]]*Architecture[[:space:]]*=.*$|Architecture = $ARCH|" $MNT_TARGET/etc/pacman.conf
				sed -i "s|^[[:space:]]*\(CheckSpace\)|#\1|" $MNT_TARGET/etc/pacman.conf
				sed -i "s|^[[:space:]]*SigLevel[[:space:]]*=.*$|SigLevel = Never|" $MNT_TARGET/etc/pacman.conf
			;;
			esac
		;;
		users)
			AIDS=`cat $HOME_DIR/deploy/android-groups`
			for AID in $AIDS
			do
				XNAME=`echo $AID | awk -F: '{print $1}'`
				XID=`echo $AID | awk -F: '{print $2}'`
				sed -i "s|^$XNAME:.*|$XNAME:x:$XID:$USER_NAME|g" $MNT_TARGET/etc/group || true
				is_str=`cat $MNT_TARGET/etc/group | grep "^$XNAME:" || true`
				[ -z "$is_str" ] && echo "$XNAME:x:$XID:$USER_NAME" >> $MNT_TARGET/etc/group
				is_str=`cat $MNT_TARGET/etc/passwd | grep "^$XNAME:" || true`
				[ -z "$is_str" ] && echo "$XNAME:x:$XID:$XID::/:/bin/false" >> $MNT_TARGET/etc/passwd
				sed -i 's|^UID_MIN.*|UID_MIN 5000|g' $MNT_TARGET/etc/login.defs
				sed -i 's|^GID_MIN.*|GID_MIN 5000|g' $MNT_TARGET/etc/login.defs
			done
			#if [ -z "`grep -v '^root:' $MNT_TARGET/etc/passwd`" ]; then
			#	echo 'root:x:0:0:root:/root:/bin/bash' >> $MNT_TARGET/etc/passwd
			#	[ ! -d "$MNT_TARGET/root" ] && mkdir $MNT_TARGET/root
			#fi
			#if [ -z "`grep '^root:' $MNT_TARGET/etc/group`" ]; then
			#	echo 'root:x:0:' >> $MNT_TARGET/etc/group
			#fi
			#if [ -z "`grep '^root:' $MNT_TARGET/etc/shadow`" ]; then
			#	echo 'root:*:14871::::::' >> $MNT_TARGET/etc/shadow
			#fi
		;;
		profile)
			reserved=`echo $USER_NAME | grep ^aid_ || true`
			if [ -n "$reserved" ]; then
				echo "Username $USER_NAME is reserved!"
				return 1
			fi
			if [ "$USER_NAME" != "root" ]; then
				chroot $MNT_TARGET groupadd $USER_NAME || true
				chroot $MNT_TARGET useradd -m -g $USER_NAME -s /bin/bash $USER_NAME || true
				chroot $MNT_TARGET usermod -g $USER_NAME $USER_NAME || true
			fi
			chroot $MNT_TARGET sh -c "export $USER_NAME; printf '%s\n' changeme changeme | passwd $USER_NAME"
			USER_HOME=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $6}'`
			USER_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $3}'`
			GROUP_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $4}'`
			PROFILE_STR='PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
			is_str=`cat $MNT_TARGET$USER_HOME/.profile | grep "$PROFILE_STR" || true`
			[ -z "$is_str" ] && echo $PROFILE_STR >> $MNT_TARGET$USER_HOME/.profile
			chown -R $USER_ID:$GROUP_ID $MNT_TARGET$USER_HOME
		;;
		sftp-server)
			case "$DISTRIB" in
			debian)
				cp $HOME_DIR/deploy/openssh/$ARCH/sftp-server $MNT_TARGET/usr/lib/openssh/sftp-server-fix
				sed -i "s|^Subsystem sftp .*|Subsystem sftp /usr/lib/openssh/sftp-server-fix|g" $MNT_TARGET/etc/ssh/sshd_config			
			;;
			esac
		;;
		upstart)
			if [ -e "$MNT_TARGET/sbin/initctl" ]; then
				rm $MNT_TARGET/sbin/initctl
				chroot $MNT_TARGET ln -s /bin/true /sbin/initctl
			fi
		;;
		gui)
			USER_HOME=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $6}'`
			USER_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $3}'`
			GROUP_ID=`cat $MNT_TARGET/etc/passwd | grep -m1 "^$USER_NAME:" | awk -F: '{print $4}'`
			mkdir $MNT_TARGET$USER_HOME/.vnc || true
			chmod 755 $MNT_TARGET$USER_HOME/.vnc
			echo "MPTcXfgXGiY=" | base64 -d > $MNT_TARGET$USER_HOME/.vnc/passwd
			chmod 600 $MNT_TARGET$USER_HOME/.vnc/passwd
			if [ "$DESKTOP_ENV" != "other" ]; then
				echo 'XAUTHORITY=$HOME/.Xauthority' > $MNT_TARGET$USER_HOME/.vnc/xstartup
				echo 'export XAUTHORITY' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				case "$DESKTOP_ENV" in
				xterm)
					echo 'xterm -max &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				lxde)
					echo 'startlxde &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				xfce)
					echo 'startxfce4 &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				gnome)
					echo 'XKL_XMODMAP_DISABLE=1' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'export XKL_XMODMAP_DISABLE' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'if [ -n "`gnome-session -h | grep "\-\-session"`" ]; then' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo '   gnome-session --session=gnome &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'else' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo '   gnome-session &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
					echo 'fi' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				kde)
					echo 'startkde &' >> $MNT_TARGET$USER_HOME/.vnc/xstartup
				;;
				esac
				chmod 755 $MNT_TARGET$USER_HOME/.vnc/xstartup
			fi
			echo "#!/bin/sh" > $MNT_TARGET$USER_HOME/.xsession
			cat $MNT_TARGET$USER_HOME/.vnc/xstartup >> $MNT_TARGET$USER_HOME/.xsession
			chmod 755 $MNT_TARGET$USER_HOME/.xsession
			chown -R $USER_ID:$GROUP_ID $MNT_TARGET$USER_HOME
		;;
		esac
	exit 0)
	[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	
	if [ "$1" == "gui" -a -n "`echo $INSTALL_GUI | grep -i "^y"`" ]; then
		echo "[PRINT_ALL] Installing GUI packages: "
		(set -e
			case "$DISTRIB" in
			debian|ubuntu)
				chroot $MNT_TARGET apt-get update -yq
				PKGS="tightvncserver x11-xserver-utils xfonts-base"
				case "$DESKTOP_ENV" in
				xterm)
					PKGS="$PKGS xterm"
				;;
				lxde)
					PKGS="$PKGS lxde menu-xdg hicolor-icon-theme gtk2-engines"
				;;
				xfce)
					PKGS="$PKGS xfce4 tango-icon-theme hicolor-icon-theme"
				;;
				gnome)
					PKGS="$PKGS gnome-core"
				;;
				kde)
					PKGS="$PKGS kde-standard"
				;;
				esac
				chroot $MNT_TARGET apt-get install $PKGS --no-install-recommends -yq
				chroot $MNT_TARGET apt-get clean
			;;
			archlinux)
				PKGS="tightvnc xorg-utils ttf-dejavu"
				case "$DESKTOP_ENV" in
				xterm)
					PKGS="$PKGS xterm"
				;;
				lxde)
					PKGS="$PKGS lxde gtk-engines"
				;;
				xfce)
					PKGS="$PKGS xfce4"
				;;
				gnome)
					PKGS="$PKGS gnome"
				;;
				kde)
					PKGS="$PKGS kdebase"
				;;
				esac
				#rm -f $MNT_TARGET/var/lib/pacman/db.lck || true
				chroot $MNT_TARGET pacman -Syq --noconfirm $PKGS
				echo "[PRINT_LN] :: Clearing cache..."
				CACHE_DIR="${MNT_TARGET%/}/var/cache/pacman/pkg"
				rm -f $CACHE_DIR/*
				#find $MNT_TARGET -type f -name "*.pacorig" -exec rm -f {} \;
			;;
			esac
		exit 0)
		[ $? -ne 0 ] && return 1
	fi
	
	return 0
}

mount_system()
{
	#echo "[PRINT] Checking file system ... "
	#if [ "$FS_TYPE" != "auto" ]; then
	#	(set -e
	#		fsck -t $FS_TYPE $IMG_TARGET
	#	exit 0)
	#	[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	#else
	#	echo "[RESULT_LN] skip"
	#fi
		
	echo "[PRINT_LN] Mounting partitions: "
	
	echo "[PRINT] / ... "
	is_mnt=`cat /proc/mounts | grep " $MNT_TARGET "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$MNT_TARGET" ] && mkdir -p $MNT_TARGET
		[ -d "$IMG_TARGET" ] && MNT_OPTS="bind" || MNT_OPTS="rw,relatime"
		mount -o $MNT_OPTS $IMG_TARGET $MNT_TARGET
		if [ $? -eq 0 ]; then
			echo "[RESULT_LN] done"
		else
			echo "[RESULT_LN] fail"; return 1
		fi
	else
		echo "[RESULT_LN] skip"
	fi
	
	echo "[PRINT] /proc ... "
	tg=$MNT_TARGET/proc; is_mnt=`cat /proc/mounts | grep " $tg "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$tg" ] && mkdir -p $tg
		mount -t proc proc $tg
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi
	
	echo "[PRINT] /sys ... "
	tg=$MNT_TARGET/sys; is_mnt=`cat /proc/mounts | grep " $tg "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$tg" ] && mkdir -p $tg
		mount -t sysfs sys $tg
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi
	
	echo "[PRINT] /dev ... "
	tg=$MNT_TARGET/dev; is_mnt=`cat /proc/mounts | grep " $tg "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$tg" ] && mkdir -p $tg
		mount -o bind /dev $tg
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi
	
	echo "[PRINT] /dev/pts ... "
	tg=$MNT_TARGET/dev/pts; is_mnt=`cat /proc/mounts | grep " $tg "`
	if [ -z "$is_mnt" ]; then
		[ ! -d "$tg" ] && mkdir -p $tg
		mount -t devpts devpts $tg
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi
	
	DISKS=`echo "$CUSTOM_MOUNT" | tr ',;' ' '`
	for disk in $DISKS
	do
		disk_name=`basename /root/$disk`
		echo "[PRINT] /mnt/$disk_name ... "
		tg=$MNT_TARGET/mnt/$disk_name
		is_tg=`cat /proc/mounts | grep " $tg "`
		if [ -z "$is_tg" -a -d "$disk" ]; then
			[ ! -d "$tg" ] && mkdir -p $tg
			mount -o bind $disk $tg
			[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
			continue
		fi
		if [ -z "$is_tg" -a -e "$disk" ]; then
			[ ! -d "$tg" ] && mkdir -p $tg
			mount -o rw,relatime $disk $tg
			[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
		else
			echo "[RESULT_LN] skip"
		fi
	done
	
	return 0
}

umount_system()
{
	echo "[PRINT] Release resources ... "
	(set -e
		for i in 1 2 3 4
		do
			[ "$i" -gt "3" ] && exit 1
			pids=`lsof | grep $MNT_TARGET | awk '{print $1}' | uniq || true`
			if [ -n "$pids" ]; then
				kill -9 $pids || true
				sleep 1
			else
				break
			fi
		done
	exit 0)
	[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	
	echo "[PRINT_LN] Unmounting partitions: "
	um=0
	for i in '.*' '*'
	do
		parts=`cat /proc/mounts | awk '{print $2}' | grep "^$MNT_TARGET/$i$" | sort -r`
		for p in $parts
		do
			pp=`echo $p | sed "s|$MNT_TARGET/*|/|g"`
			echo "[PRINT] $pp ... "
			umount $p
			[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
			um=1
		done
	done
	[ $um -eq 0 ] && echo "[PRINT_LN] ...not mounted anything"
	
	echo "[PRINT] Disassociating loop device ... "
	(set -e
		loop=`losetup | grep $IMG_TARGET | awk -F: '{print $1}' || true`
		[ -n "$loop" ] && losetup -d $loop
	exit 0)
	[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	
	return 0
}

start_system()
{
	mount_system
	[ $? -ne 0 ] && return 1
	
	echo "[PRINT_LN] Updating configuration: "
	configure_system dns mtab
	
	echo "[PRINT_LN] Starting services: "
	echo "[PRINT] SSH ... "
	is_ssh=`echo $SSH_START | grep -i "^y"`
	if [ -n "$is_ssh" ]; then
		(set -e
			sed -i "s|^Port .*|Port $SSH_PORT|g" $MNT_TARGET/etc/ssh/sshd_config
			case "$DISTRIB" in
			debian|ubuntu)
				chroot $MNT_TARGET su - root -c "/etc/init.d/ssh start"
			;;
			archlinux)
				chroot $MNT_TARGET su - root -c "/etc/rc.d/sshd start"
			;;
			esac
		exit 0)
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi

	echo "[PRINT] VNC ... "	
	is_vnc=`echo $VNC_START | grep -i "^y"`
	if [ -n "$is_vnc" ]; then
		(set -e
			[ -e "$MNT_TARGET/tmp/.X$VNC_DISPLAY-lock" ] && rm $MNT_TARGET/tmp/.X$VNC_DISPLAY-lock
			[ -e "$MNT_TARGET/tmp/.X11-unix/X$VNC_DISPLAY" ] && rm $MNT_TARGET/tmp/.X11-unix/X$VNC_DISPLAY
			chroot $MNT_TARGET su - $USER_NAME -c "vncserver -depth $VNC_DEPTH -geometry $VNC_GEOMETRY :$VNC_DISPLAY"
		exit 0)
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi
	
	echo "[PRINT] X Window System ... "	
	is_xserver=`echo $XSERVER_START | grep -i "^y"`
	if [ -n "$is_xserver" ]; then
		(set -e
			chroot $MNT_TARGET su - $USER_NAME -c "export DISPLAY=$XSERVER_HOST:$XSERVER_DISPLAY; cut -d ' ' -f 6 /proc/self/stat > ~/.xsessionid; chmod 644 ~/.xsessionid; ~/.xsession"
		exit 0)
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi
	
	SCRIPTS=`echo "$CUSTOM_STARTUP" | tr ',;' ' '`
	for script in $SCRIPTS
	do
		echo "[PRINT] $script ... "
		(set -e
			chroot $MNT_TARGET su - root -c "$script start"
		exit 0)
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	done
	
	return 0
}

stop_system()
{
	echo "[PRINT_LN] Stopping services: "
	
	echo "[PRINT] SSH ... "
	is_ssh=`echo $SSH_START | grep -i "^y"`
	if [ -n "$is_ssh" ]; then
		(set -e
			case "$DISTRIB" in
			debian|ubuntu)
				chroot $MNT_TARGET su - root -c "/etc/init.d/ssh stop"
			;;
			archlinux)
				chroot $MNT_TARGET su - root -c "/etc/rc.d/sshd stop"
			;;
			esac
			sleep 1
			pkill -9 sshd || true
		exit 0)
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi

	echo "[PRINT] VNC ... "	
	is_vnc=`echo $VNC_START | grep -i "^y"`
	if [ -n "$is_vnc" ]; then
		(set -e
			chroot $MNT_TARGET su - $USER_NAME -c "vncserver -kill :$VNC_DISPLAY"
			sleep 1
			pkill -9 Xtightvnc || true
		exit 0)
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi
	
	echo "[PRINT] X Window System ... "	
	is_xserver=`echo $XSERVER_START | grep -i "^y"`
	if [ -n "$is_xserver" ]; then
		(set -e
			chroot $MNT_TARGET su - $USER_NAME -c 'kill -9 -$(cat ~/.xsessionid)'
		exit 0)
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	else
		echo "[RESULT_LN] skip"
	fi
	
	SCRIPTS=`echo "$CUSTOM_STARTUP" | tr ',;' ' '`
	for script in $SCRIPTS
	do
		echo "[PRINT] $script ... "
		(set -e
			chroot $MNT_TARGET su - root -c "$script stop"
		exit 0)
		[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	done
	
	umount_system
	[ $? -ne 0 ] && return 1
	
	return 0
}

install_system()
{
	prepare_system
	[ $? -ne 0 ] && return 1

	mount_system
	[ $? -ne 0 ] && return 1

	case "$DISTRIB" in
	debian|ubuntu)
		echo "[PRINT_ALL] Installing GNU/Linux system: "
		
		[ -z "$DEBOOTSTRAP_DIR" ] && DEBOOTSTRAP_DIR=$HOME_DIR/deploy/debootstrap
		export DEBOOTSTRAP_DIR
		debootstrap --no-check-gpg --arch $ARCH --foreign --extractor=ar --include=locales,openssh-server,sudo,lsb-release $SUITE $MNT_TARGET $MIRROR
		[ $? -ne 0 ] && return 1

		unset DEBOOTSTRAP_DIR
		chroot $MNT_TARGET /debootstrap/debootstrap --second-stage
		[ $? -ne 0 ] && return 1
	;;
	archlinux)
		#wget -O - $MIRROR | tar xzf - -C $MNT_TARGET
		#[ $? -ne 0 ] && return 1
		
		echo "[PRINT_LN] Installing GNU/Linux system: "
		
		BASIC_PACKAGES="acl archlinux-keyring attr bash bzip2 ca-certificates coreutils cracklib curl db dirmngr e2fsprogs expat findutils gawk gcc-libs gdbm glibc gmp gnupg gpgme grep libarchive libassuan libcap libgcrypt libgpg-error libgssglue libksba libldap libsasl libssh2 libtirpc linux-api-headers ncurses openssl pacman pacman-mirrorlist pam pambase perl pinentry pth readline run-parts sed shadow tzdata util-linux xz zlib"
		REPO="${MIRROR%/}/$ARCH/core"
		CACHE_DIR="${MNT_TARGET%/}/var/cache/pacman/pkg"
		
		echo "[PRINT_LN] :: Retrieving packages list..."
		PKG_LIST=`wget -q -O - "$REPO/" | sed -n '/<a / s/^.*<a [^>]*href="\([^\"]*\)".*$/\1/p' | awk -F'/' '{print $NF}' | sort -rn`
		test "$PKG_LIST" || { echo "[PRINT_LN] Error processing packages list"; return 1; }

		echo "[PRINT_LN] :: Retrieving basic packages..."
		mkdir -p $CACHE_DIR
		for PACKAGE in $BASIC_PACKAGES; do
    		FILE=`echo "$PKG_LIST" | grep -m1 -e "^$PACKAGE-[[:digit:]].*\.xz$" -e "^$PACKAGE-[[:digit:]].*\.gz$"`
    		test "$FILE" || { echo "[PRINT_LN] Error: cannot find package: $PACKAGE"; return 1; }

    		echo "[PRINT_LN] downloading ${FILE}... "
    		for i in 1 2 3
    		do
    			wget -q -c -O $CACHE_DIR/$FILE $REPO/$FILE
    			[ $? -eq 0 ] && break
    			sleep 30s
    		done
    		
    		#echo "[PRINT_LN] unpacking ${FILE}... "
			case "$FILE" in
    		*.gz) tar xzf $CACHE_DIR/$FILE -C $MNT_TARGET;;
    		*.xz) xz -dc $CACHE_DIR/$FILE | tar x -C $MNT_TARGET;;
    		*) echo "[PRINT_LN] Error: unknown package format: $FILE"; return 1;;
			esac
		done
		
		echo "[PRINT_LN] :: Preconfigure system:"
		configure_system dns mtab repository
		
		echo "[PRINT_ALL] :: Installing packages..."
		(set -e
			chroot $MNT_TARGET /usr/bin/pacman --noconfirm -Sy
			EXTRA_PACKAGES=`chroot $MNT_TARGET /usr/bin/pacman --noconfirm -Sg base | awk '{print $2}' | grep -v -e 'linux' -e 'kernel'`
			chroot $MNT_TARGET /usr/bin/pacman --noconfirm -Sqf $BASIC_PACKAGES $EXTRA_PACKAGES initscripts sudo openssh lsb-release
		exit 0)
		[ $? -ne 0 ] && return 1
		
		echo "[PRINT_LN] :: Clearing cache..."
		rm -f $CACHE_DIR/*
		find $MNT_TARGET -type f -name "*.pacorig" -exec rm -f {} \;
	;;
	esac

	configure_system
	[ $? -ne 0 ] && return 1

	return 0
}

uninstall_system()
{
	umount_system
	[ $? -ne 0 ] && return 1
	
	#echo "[PRINT] Removing disk image ... "
	#(set -e
	#	[ -f "$IMG_TARGET" ] && rm $IMG_TARGET
	#	[ -d "$MNT_TARGET" ] && rmdir $MNT_TARGET
	#exit 0)
	#[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	
	echo "[PRINT] Removing environment ... "
	(set -e
		rm -rf $HOME_DIR/mnt $HOME_DIR/deploy $HOME_DIR/etc $HOME_DIR/bin
		[ -d "$HOME_DIR" ] && rmdir $HOME_DIR
	exit 0)
	[ $? -eq 0 ] && echo "[RESULT_LN] done" || echo "[RESULT_LN] fail"
	
	return 0
}

#################################################

case "$1" in
mount)
	mount_system
;;
umount)
	umount_system
;;
install)
	install_system
;;
configure)
	mount_system
	[ $? -eq 0 ] && configure_system
;;
uninstall)
	uninstall_system
;;
start)
	start_system
;;
stop)
	stop_system
;;
*)
	echo "Usage: $0 <mount|umount|install|configure|uninstall|start|stop>"
;;
esac
